:py:mod:`dicee.eval_static_funcs`
=================================

.. py:module:: dicee.eval_static_funcs


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   dicee.eval_static_funcs.evaluate_link_prediction_performance
   dicee.eval_static_funcs.evaluate_link_prediction_performance_with_reciprocals
   dicee.eval_static_funcs.evaluate_link_prediction_performance_with_bpe_reciprocals
   dicee.eval_static_funcs.evaluate_link_prediction_performance_with_bpe
   dicee.eval_static_funcs.evaluate_lp_bpe_k_vs_all



.. py:function:: evaluate_link_prediction_performance(model: dicee.knowledge_graph_embeddings.KGE, triples, er_vocab: Dict[Tuple, List], re_vocab: Dict[Tuple, List]) -> Dict

   :param model:
   :param triples:
   :param er_vocab:
   :param re_vocab:


.. py:function:: evaluate_link_prediction_performance_with_reciprocals(model: dicee.knowledge_graph_embeddings.KGE, triples, er_vocab: Dict[Tuple, List])


.. py:function:: evaluate_link_prediction_performance_with_bpe_reciprocals(model: dicee.knowledge_graph_embeddings.KGE, within_entities: List[str], triples: List[List[str]], er_vocab: Dict[Tuple, List])


.. py:function:: evaluate_link_prediction_performance_with_bpe(model: dicee.knowledge_graph_embeddings.KGE, within_entities: List[str], triples: List[Tuple[str]], er_vocab: Dict[Tuple, List], re_vocab: Dict[Tuple, List])

   :param model:
   :param triples:
   :param within_entities:
   :param er_vocab:
   :param re_vocab:


.. py:function:: evaluate_lp_bpe_k_vs_all(model, triples: List[List[str]], er_vocab=None, batch_size=None, func_triple_to_bpe_representation: Callable = None, str_to_bpe_entity_to_idx=None)


