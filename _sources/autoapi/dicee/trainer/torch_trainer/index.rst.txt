:py:mod:`dicee.trainer.torch_trainer`
=====================================

.. py:module:: dicee.trainer.torch_trainer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dicee.trainer.torch_trainer.TorchTrainer




.. py:class:: TorchTrainer(args, callbacks)


   Bases: :py:obj:`dicee.abstracts.AbstractTrainer`

   A trainer class for PyTorch models that supports training on a single GPU or multiple CPUs.

   :param args: Configuration arguments for training, including model hyperparameters and training options.
   :type args: dict
   :param callbacks: List of callback functions to be called at various points of the training process.
   :type callbacks: List[Callable]

   .. attribute:: loss_function

      The loss function used for training.

      :type: Callable

   .. attribute:: optimizer

      The optimizer used for training.

      :type: torch.optim.Optimizer

   .. attribute:: model

      The PyTorch model being trained.

      :type: torch.nn.Module

   .. attribute:: train_dataloaders

      torch.utils.data.DataLoader providing access to the training data.

      :type: torch.utils.data.DataLoader

   .. attribute:: training_step

      The training step function defining the forward pass and loss computation.

      :type: Callable

   .. attribute:: device

      The device (CPU or GPU) on which training is performed.

      :type: torch.device

   .. method:: _run_batch(i: int, x_batch: torch.Tensor, y_batch: torch.Tensor) -> float:

      Executes a training step for a single batch and returns the loss value.

   .. method:: _run_epoch(epoch: int) -> float:

      Executes training for one epoch and returns the average loss.

   .. method:: fit(*args, train_dataloaders: torch.utils.data.DataLoader, \*\*kwargs) -> None:

      Starts the training process for the given model and data.

   .. method:: forward_backward_update(x_batch: torch.Tensor, y_batch: torch.Tensor) -> float:

      Performs the forward pass, computes the loss, and updates model weights.

   .. method:: extract_input_outputs_set_device(batch: list) -> Tuple[torch.Tensor, torch.Tensor]:

      Prepares and moves batch data to the appropriate device.


   .. py:method:: fit(*args, train_dataloaders: torch.utils.data.DataLoader, **kwargs) -> None

      Starts the training process for the given model and training data.

      :param model: The model to be trained.
      :type model: torch.nn.Module
      :param train_dataloaders: A DataLoader instance providing access to the training data.
      :type train_dataloaders: torch.utils.data.DataLoader


   .. py:method:: forward_backward_update(x_batch: torch.Tensor, y_batch: torch.Tensor) -> float

      Performs the forward pass, computes the loss, performs the backward pass to compute gradients,
      and updates the model weights.

      :param x_batch: The batch of input features.
      :type x_batch: torch.Tensor
      :param y_batch: The batch of target outputs.
      :type y_batch: torch.Tensor

      :returns: The loss value computed for the batch.
      :rtype: float


   .. py:method:: extract_input_outputs_set_device(batch: list) -> Tuple[torch.Tensor, torch.Tensor]

      Prepares a batch by extracting inputs and outputs and moving them to the correct device.

      :param batch: A list containing inputs and outputs for the batch.
      :type batch: list

      :returns: A tuple containing the batch of input features and target outputs,
                both moved to the appropriate device.
      :rtype: Tuple[torch.Tensor, torch.Tensor]



