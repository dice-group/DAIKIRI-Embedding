dicee.trainer.torch_trainer
===========================

.. py:module:: dicee.trainer.torch_trainer


Classes
-------

.. autoapisummary::

   dicee.trainer.torch_trainer.AbstractTrainer
   dicee.trainer.torch_trainer.TorchTrainer


Module Contents
---------------

.. py:class:: AbstractTrainer(args, callbacks)

   Abstract class for Trainer class for knowledge graph embedding models


   Parameter
   ---------
   args : str
       ?

   callbacks: list
           ?


   .. py:method:: on_fit_start(*args, **kwargs)

      A function to call callbacks before the training starts.

      Parameter
      ---------
      args

      kwargs


      :rtype: None



   .. py:method:: on_fit_end(*args, **kwargs)

      A function to call callbacks at the ned of the training.

      Parameter
      ---------
      args

      kwargs


      :rtype: None



   .. py:method:: on_train_epoch_end(*args, **kwargs)

      A function to call callbacks at the end of an epoch.

      Parameter
      ---------
      args

      kwargs


      :rtype: None



   .. py:method:: on_train_batch_end(*args, **kwargs)

      A function to call callbacks at the end of each mini-batch during training.

      Parameter
      ---------
      args

      kwargs


      :rtype: None



   .. py:method:: save_checkpoint(full_path: str, model) -> None
      :staticmethod:


      A static function to save a model into disk

      Parameter
      ---------
      full_path : str

      model:


      :rtype: None



.. py:class:: TorchTrainer(args, callbacks)

   Bases: :py:obj:`dicee.abstracts.AbstractTrainer`


    TorchTrainer for using single GPU or multi CPUs on a single node

    Arguments
   ----------
   args: ?

   callbacks: list of Abstract callback instances



   .. py:method:: fit(*args, train_dataloaders, **kwargs) -> None

       Training starts

       Arguments
      ----------
      args:tuple
      (BASEKGE,)
      kwargs:Tuple
          empty dictionary
      :rtype: batch loss (float)



   .. py:method:: forward_backward_update(x_batch: torch.Tensor, y_batch: torch.Tensor) -> torch.Tensor

       Compute forward, loss, backward, and parameter update

       Arguments
      ----------
      x_batch:(torch.Tensor) mini-batch inputs
      y_batch:(torch.Tensor) mini-batch outputs

      :rtype: batch loss (float)



   .. py:method:: extract_input_outputs_set_device(batch: list) -> Tuple

       Construct inputs and outputs from a batch of inputs with outputs From a batch of inputs and put

       Arguments
      ----------
      batch: (list) mini-batch inputs on CPU

      :rtype: (tuple) mini-batch on select device



