:py:mod:`dicee.models.pykeen_models`
====================================

.. py:module:: dicee.models.pykeen_models


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dicee.models.pykeen_models.PykeenKGE




.. py:class:: PykeenKGE(args: dict)


   Bases: :py:obj:`dicee.models.base_model.BaseKGE`

   A class for using knowledge graph embedding models implemented in Pykeen.

   :param args: A dictionary of arguments containing hyperparameters and settings for the model,
                such as embedding dimensions, random seed, and model-specific kwargs.
   :type args: dict

   .. attribute:: name

      The name identifier for the PykeenKGE model.

      :type: str

   .. attribute:: model

      The Pykeen model instance.

      :type: pykeen.models.base.Model

   .. attribute:: loss_history

      A list to store the training loss history.

      :type: list

   .. attribute:: args

      The arguments used to initialize the model.

      :type: dict

   .. attribute:: entity_embeddings

      Entity embeddings learned by the model.

      :type: torch.nn.Embedding

   .. attribute:: relation_embeddings

      Relation embeddings learned by the model.

      :type: torch.nn.Embedding

   .. attribute:: interaction

      Interaction module used by the Pykeen model.

      :type: pykeen.nn.modules.Interaction

   .. method:: forward_k_vs_all(x: torch.LongTensor) -> torch.FloatTensor

      Compute scores for all entities given a batch of head entities and relations.

   .. method:: forward_triples(x: torch.LongTensor) -> torch.FloatTensor

      Compute scores for a batch of triples.

   .. method:: forward_k_vs_sample(x: torch.LongTensor, target_entity_idx: int)

      Compute scores against a sampled subset of entities.


   .. rubric:: Notes

   This class provides an interface for using knowledge graph embedding models implemented
   in Pykeen. It initializes Pykeen models based on the provided arguments and allows for
   scoring triples and conducting knowledge graph embedding experiments.

   .. py:method:: forward_k_vs_all(x: torch.LongTensor)

      TODO: Format in Numpy-style documentation

      # => Explicit version by this we can apply bn and dropout

      # (1) Retrieve embeddings of heads and relations +  apply Dropout & Normalization if given.
      h, r = self.get_head_relation_representation(x)
      # (2) Reshape (1).
      if self.last_dim > 0:
          h = h.reshape(len(x), self.embedding_dim, self.last_dim)
          r = r.reshape(len(x), self.embedding_dim, self.last_dim)
      # (3) Reshape all entities.
      if self.last_dim > 0:
          t = self.entity_embeddings.weight.reshape(self.num_entities, self.embedding_dim, self.last_dim)
      else:
          t = self.entity_embeddings.weight
      # (4) Call the score_t from interactions to generate triple scores.
      return self.interaction.score_t(h=h, r=r, all_entities=t, slice_size=1)


   .. py:method:: forward_triples(x: torch.LongTensor) -> torch.FloatTensor

      TODO: Format in Numpy-style documentation

      # => Explicit version by this we can apply bn and dropout

      # (1) Retrieve embeddings of heads, relations and tails and apply Dropout & Normalization if given.
      h, r, t = self.get_triple_representation(x)
      # (2) Reshape (1).
      if self.last_dim > 0:
          h = h.reshape(len(x), self.embedding_dim, self.last_dim)
          r = r.reshape(len(x), self.embedding_dim, self.last_dim)
          t = t.reshape(len(x), self.embedding_dim, self.last_dim)
      # (3) Compute the triple score
      return self.interaction.score(h=h, r=r, t=t, slice_size=None, slice_dim=0)


   .. py:method:: forward_k_vs_sample(x: torch.LongTensor, target_entity_idx: int)
      :abstractmethod:

      Forward pass for K vs. Sample.

      :raises ValueError: This function is not implemented in the current model.



