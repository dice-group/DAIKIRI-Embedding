dicee.models.real
=================

.. py:module:: dicee.models.real


Classes
-------

.. autoapisummary::

   dicee.models.real.DistMult
   dicee.models.real.TransE
   dicee.models.real.Shallom
   dicee.models.real.Pyke


Module Contents
---------------

.. py:class:: DistMult(args)

   Bases: :py:obj:`dicee.models.base_model.BaseKGE`


   Embedding Entities and Relations for Learning and Inference in Knowledge Bases
   https://arxiv.org/abs/1412.6575


   .. py:attribute:: name
      :value: 'DistMult'



   .. py:method:: k_vs_all_score(emb_h: torch.FloatTensor, emb_r: torch.FloatTensor, emb_E: torch.FloatTensor)

      :param emb_h:
      :param emb_r:
      :param emb_E:



   .. py:method:: forward_k_vs_all(x: torch.LongTensor)


   .. py:method:: forward_k_vs_sample(x: torch.LongTensor, target_entity_idx: torch.LongTensor)


   .. py:method:: score(h, r, t)


.. py:class:: TransE(args)

   Bases: :py:obj:`dicee.models.base_model.BaseKGE`


   Translating Embeddings for Modeling
   Multi-relational Data
   https://proceedings.neurips.cc/paper/2013/file/1cecc7a77928ca8133fa24680a88d2f9-Paper.pdf


   .. py:attribute:: name
      :value: 'TransE'



   .. py:attribute:: margin
      :value: 4



   .. py:method:: score(head_ent_emb, rel_ent_emb, tail_ent_emb)


   .. py:method:: forward_k_vs_all(x: torch.Tensor) -> torch.FloatTensor


.. py:class:: Shallom(args)

   Bases: :py:obj:`dicee.models.base_model.BaseKGE`


   A shallow neural model for relation prediction (https://arxiv.org/abs/2101.09090)


   .. py:attribute:: name
      :value: 'Shallom'



   .. py:attribute:: shallom_width


   .. py:attribute:: shallom


   .. py:method:: get_embeddings() -> Tuple[numpy.ndarray, None]


   .. py:method:: forward_k_vs_all(x) -> torch.FloatTensor


   .. py:method:: forward_triples(x) -> torch.FloatTensor

      :param x:
      :return:



.. py:class:: Pyke(args)

   Bases: :py:obj:`dicee.models.base_model.BaseKGE`


   A Physical Embedding Model for Knowledge Graphs


   .. py:attribute:: name
      :value: 'Pyke'



   .. py:attribute:: dist_func


   .. py:attribute:: margin
      :value: 1.0



   .. py:method:: forward_triples(x: torch.LongTensor)

      :param x:



