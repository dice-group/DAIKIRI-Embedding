:py:mod:`dicee.read_preprocess_save_load_kg.read_from_disk`
===========================================================

.. py:module:: dicee.read_preprocess_save_load_kg.read_from_disk


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   dicee.read_preprocess_save_load_kg.read_from_disk.ReadFromDisk




.. py:class:: ReadFromDisk(kg)


   Read the data from disk into memory.

   This class is responsible for loading a knowledge graph from various sources such as
   disk files, triple stores, or SPARQL endpoints, and then making it available in memory
   for further processing.

   .. attribute:: kg

      An instance representing the knowledge graph.

      :type: object

   .. method:: start() -> None

      Read a knowledge graph from disk into memory.

   .. method:: add_noisy_triples_into_training() -> None

      Add noisy triples into the training set of the knowledge graph.


   .. py:method:: start() -> None

      Read a knowledge graph from disk into memory.

      This method reads the knowledge graph data from the specified source (disk, triple store,
      or SPARQL endpoint) and loads it into memory. The data is made available in the
      train_set, test_set, and valid_set attributes of the knowledge graph instance.

      :param None:

      :rtype: None

      :raises RuntimeError: If the data source is invalid or not specified correctly.


   .. py:method:: add_noisy_triples_into_training() -> None

      Add noisy triples into the training set of the knowledge graph.

      This method injects a specified proportion of noisy triples into the training set.
      Noisy triples are randomly generated by shuffling the entities and relations in the
      knowledge graph. The purpose of adding noisy triples is often to test the robustness
      of the model or to augment the training data.

      :param None:

      :rtype: None

      .. rubric:: Notes

      The number of noisy triples added is determined by the 'add_noise_rate' attribute
      of the knowledge graph. The method ensures that the total number of triples (original
      plus noisy) in the training set matches the expected count after adding the noisy triples.



