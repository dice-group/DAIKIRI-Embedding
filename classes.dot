digraph "classes" {
rankdir=BT
charset="utf-8"
"dicee.models.complex.AConEx" [color="black", fontcolor="black", label=<{AConEx|bn_conv2d : BatchNorm2d<br ALIGN="LEFT"/>conv2d : Conv2d<br ALIGN="LEFT"/>entity_embeddings : Embedding<br ALIGN="LEFT"/>fc1 : Linear<br ALIGN="LEFT"/>fc_num_input<br ALIGN="LEFT"/>feature_map_dropout : Dropout2d<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>norm_fc1 : LayerNorm, BatchNorm1d<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_k_vs_sample(x: torch.Tensor, target_entity_idx: torch.Tensor)<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>residual_convolution(C_1: Tuple[torch.Tensor, torch.Tensor], C_2: Tuple[torch.Tensor, torch.Tensor]): torch.FloatTensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.base_model.BaseKGE" [color="black", fontcolor="black", label=<{BaseKGE|apply_unit_norm : NoneType<br ALIGN="LEFT"/>args : dict<br ALIGN="LEFT"/>embedding_dim : NoneType, int<br ALIGN="LEFT"/>feature_map_dropout_rate : float, NoneType<br ALIGN="LEFT"/>hidden_dropout : Dropout<br ALIGN="LEFT"/>hidden_dropout_rate : NoneType, float<br ALIGN="LEFT"/>hidden_normalizer<br ALIGN="LEFT"/>input_dp_ent_real : Dropout<br ALIGN="LEFT"/>input_dp_rel_real : Dropout<br ALIGN="LEFT"/>input_dropout_rate : NoneType, float<br ALIGN="LEFT"/>kernel_size : NoneType, int<br ALIGN="LEFT"/>learning_rate : NoneType, float<br ALIGN="LEFT"/>loss : BCEWithLogitsLoss<br ALIGN="LEFT"/>loss_history : list<br ALIGN="LEFT"/>normalize_head_entity_embeddings : BatchNorm1d, LayerNorm<br ALIGN="LEFT"/>normalize_relation_embeddings : LayerNorm, BatchNorm1d<br ALIGN="LEFT"/>normalize_tail_entity_embeddings : LayerNorm, BatchNorm1d<br ALIGN="LEFT"/>normalizer_class : BatchNorm1d, NoneType, LayerNorm<br ALIGN="LEFT"/>num_entities : NoneType, int<br ALIGN="LEFT"/>num_of_output_channels : NoneType, int<br ALIGN="LEFT"/>num_relations : int, NoneType<br ALIGN="LEFT"/>optimizer_name : NoneType<br ALIGN="LEFT"/>param_init : NoneType<br ALIGN="LEFT"/>selected_optimizer : Adam, NoneType, Adagrad, ASGD, SGD, NAdam<br ALIGN="LEFT"/>weight_decay : NoneType, float<br ALIGN="LEFT"/>|configure_optimizers(parameters)<br ALIGN="LEFT"/>forward(x: Union[torch.LongTensor, Tuple[torch.LongTensor, torch.LongTensor]], y_idx: torch.LongTensor)<br ALIGN="LEFT"/>forward_k_vs_all()<br ALIGN="LEFT"/>forward_k_vs_sample()<br ALIGN="LEFT"/>forward_triples()<br ALIGN="LEFT"/>get_embeddings(): Tuple[np.ndarray, np.ndarray]<br ALIGN="LEFT"/>get_head_relation_representation(indexed_triple)<br ALIGN="LEFT"/>get_optimizer_class()<br ALIGN="LEFT"/>get_triple_representation(indexed_triple)<br ALIGN="LEFT"/>init_params_with_sanity_checking()<br ALIGN="LEFT"/>loss_function(yhat_batch, y_batch)<br ALIGN="LEFT"/>mem_of_model(): Dict<br ALIGN="LEFT"/><I>predict_dataloader</I>(): None<br ALIGN="LEFT"/><I>test_dataloader</I>(): None<br ALIGN="LEFT"/><I>test_epoch_end</I>(outputs: List[Any])<br ALIGN="LEFT"/><I>test_step</I>(batch, batch_idx)<br ALIGN="LEFT"/><I>train_dataloader</I>(): None<br ALIGN="LEFT"/>training_epoch_end(training_step_outputs)<br ALIGN="LEFT"/>training_step(batch, batch_idx)<br ALIGN="LEFT"/><I>val_dataloader</I>(): None<br ALIGN="LEFT"/><I>validation_epoch_end</I>(outputs: List[Any]): None<br ALIGN="LEFT"/><I>validation_step</I>(batch, batch_idx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.clifford.CMult" [color="black", fontcolor="black", label=<{CMult|entity_embeddings : Embedding<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>p : int<br ALIGN="LEFT"/>q : int<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|clifford_mul(x: torch.FloatTensor, y: torch.FloatTensor, p: int, q: int): tuple<br ALIGN="LEFT"/>forward_k_vs_all(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_triples(x: torch.LongTensor): torch.FloatTensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.complex.ComplEx" [color="black", fontcolor="black", label=<{ComplEx|entity_embeddings : Embedding<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.LongTensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_triples(x: torch.LongTensor): torch.FloatTensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.complex.ConEx" [color="black", fontcolor="black", label=<{ConEx|bn_conv2d : BatchNorm2d<br ALIGN="LEFT"/>conv2d : Conv2d<br ALIGN="LEFT"/>entity_embeddings : Embedding<br ALIGN="LEFT"/>fc1 : Linear<br ALIGN="LEFT"/>fc_num_input<br ALIGN="LEFT"/>feature_map_dropout : Dropout2d<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>norm_fc1 : LayerNorm, BatchNorm1d<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_k_vs_sample(x: torch.Tensor, target_entity_idx: torch.Tensor)<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>residual_convolution(C_1: Tuple[torch.Tensor, torch.Tensor], C_2: Tuple[torch.Tensor, torch.Tensor]): torch.FloatTensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.octonion.ConvO" [color="black", fontcolor="black", label=<{ConvO|bn_conv2d : BatchNorm2d<br ALIGN="LEFT"/>conv2d : Conv2d<br ALIGN="LEFT"/>entity_embeddings : Embedding<br ALIGN="LEFT"/>fc1 : Linear<br ALIGN="LEFT"/>fc_num_input<br ALIGN="LEFT"/>feature_map_dropout : Dropout2d<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>norm_fc1 : LayerNorm, BatchNorm1d<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.Tensor)<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>residual_convolution(O_1, O_2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.quaternion.ConvQ" [color="black", fontcolor="black", label=<{ConvQ|bn_conv1 : BatchNorm2d<br ALIGN="LEFT"/>bn_conv2 : BatchNorm1d, LayerNorm<br ALIGN="LEFT"/>conv2d : Conv2d<br ALIGN="LEFT"/>entity_embeddings : Embedding<br ALIGN="LEFT"/>fc1 : Linear<br ALIGN="LEFT"/>fc_num_input<br ALIGN="LEFT"/>feature_map_dropout : Dropout2d<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.Tensor)<br ALIGN="LEFT"/>forward_triples(indexed_triple: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>residual_convolution(Q_1, Q_2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.real.DistMult" [color="black", fontcolor="black", label=<{DistMult|entity_embeddings : Embedding<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.LongTensor)<br ALIGN="LEFT"/>forward_k_vs_sample(x: torch.LongTensor, target_entity_idx: torch.LongTensor)<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.function_space.FMult" [color="black", fontcolor="black", label=<{FMult|entity_embeddings : Embedding<br ALIGN="LEFT"/>gamma<br ALIGN="LEFT"/>k : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>num_sample : int<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|chain_func(weights, x: torch.FloatTensor)<br ALIGN="LEFT"/>compute_func(weights: torch.FloatTensor, x): torch.FloatTensor<br ALIGN="LEFT"/>forward_triples(idx_triple: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.base_model.IdentityClass" [color="black", fontcolor="black", label=<{IdentityClass|args : NoneType<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.clifford.Keci" [color="black", fontcolor="black", label=<{Keci|entity_embeddings : Embedding<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>p : int<br ALIGN="LEFT"/>p_coefficients : Embedding<br ALIGN="LEFT"/>q : int<br ALIGN="LEFT"/>q_coefficients : Embedding<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>requires_grad_for_interactions : bool<br ALIGN="LEFT"/>|apply_coefficients(h0, hp, hq, r0, rp, rq)<br ALIGN="LEFT"/>clifford_multiplication(h0, hp, hq, r0, rp, rq)<br ALIGN="LEFT"/>compute_sigma_pp(hp, rp)<br ALIGN="LEFT"/>compute_sigma_pq()<br ALIGN="LEFT"/>compute_sigma_qq(hq, rq)<br ALIGN="LEFT"/>construct_cl_multivector(x: torch.FloatTensor, r: int, p: int, q: int): tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]<br ALIGN="LEFT"/>forward_k_vs_all(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_k_vs_sample(x: torch.LongTensor, target_entity_idx: torch.LongTensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_k_vs_with_explicit(x: torch.Tensor)<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.clifford.KeciBase" [color="black", fontcolor="black", label=<{KeciBase|name : str<br ALIGN="LEFT"/>p_coefficients : Embedding<br ALIGN="LEFT"/>q_coefficients : Embedding<br ALIGN="LEFT"/>requires_grad_for_interactions : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"dicee.models.pykeen_LCWALitModule.MyLCWALitModule" [color="black", fontcolor="black", label=<{MyLCWALitModule|args<br ALIGN="LEFT"/>loss_history : list<br ALIGN="LEFT"/>train_dataloaders : DataLoader<br ALIGN="LEFT"/>|<I>training_epoch_end</I>(training_step_outputs): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.pykeen_SLCWALitModule.MySLCWALitModule" [color="black", fontcolor="black", label=<{MySLCWALitModule|args<br ALIGN="LEFT"/>loss_history : list<br ALIGN="LEFT"/>train_dataloaders : DataLoader<br ALIGN="LEFT"/>|training_epoch_end(training_step_outputs): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.octonion.OMult" [color="black", fontcolor="black", label=<{OMult|entity_embeddings<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.Tensor)<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.real.Pyke" [color="black", fontcolor="black", label=<{Pyke|dist_func : PairwiseDistance<br ALIGN="LEFT"/>entity_embeddings : Embedding<br ALIGN="LEFT"/>margin : float<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_triples(x: torch.LongTensor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.pykeen_Module.Pykeen_Module" [color="black", fontcolor="black", label=<{Pykeen_Module|name<br ALIGN="LEFT"/>selected_optimizer<br ALIGN="LEFT"/>|forward_triples(x: torch.Tensor, h_prediction, t_prediction): torch.FloatTensor<br ALIGN="LEFT"/>get_embeddings(): Tuple[np.ndarray, np.ndarray]<br ALIGN="LEFT"/>mem_of_model(): Dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.quaternion.QMult" [color="black", fontcolor="black", label=<{QMult|entity_embeddings : Embedding<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x)<br ALIGN="LEFT"/>forward_k_vs_sample(x, target_entity_idx)<br ALIGN="LEFT"/>forward_triples(indexed_triple: torch.Tensor): torch.Tensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.real.Shallom" [color="black", fontcolor="black", label=<{Shallom|entity_embeddings : Embedding<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>shallom : Sequential<br ALIGN="LEFT"/>|forward_k_vs_all(x): torch.FloatTensor<br ALIGN="LEFT"/>forward_triples(x): torch.FloatTensor<br ALIGN="LEFT"/>get_embeddings(): Tuple[np.ndarray, None]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.real.TransE" [color="black", fontcolor="black", label=<{TransE|entity_embeddings : Embedding<br ALIGN="LEFT"/>margin : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>relation_embeddings : Embedding<br ALIGN="LEFT"/>|forward_k_vs_all(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>forward_triples(x: torch.Tensor): torch.FloatTensor<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"dicee.models.clifford.CMult" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.clifford.Keci" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.clifford.KeciBase" -> "dicee.models.clifford.Keci" [arrowhead="empty", arrowtail="none"];
"dicee.models.complex.AConEx" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.complex.ComplEx" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.complex.ConEx" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.function_space.FMult" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.octonion.ConvO" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.octonion.OMult" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.pykeen_LCWALitModule.MyLCWALitModule" -> "dicee.models.pykeen_Module.Pykeen_Module" [arrowhead="empty", arrowtail="none"];
"dicee.models.pykeen_SLCWALitModule.MySLCWALitModule" -> "dicee.models.pykeen_Module.Pykeen_Module" [arrowhead="empty", arrowtail="none"];
"dicee.models.quaternion.ConvQ" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.quaternion.QMult" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.real.DistMult" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.real.Pyke" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.real.Shallom" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.real.TransE" -> "dicee.models.base_model.BaseKGE" [arrowhead="empty", arrowtail="none"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_head_entity_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_head_entity_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_head_entity_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_relation_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_relation_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_relation_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_tail_entity_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_tail_entity_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="normalize_tail_entity_embeddings", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hidden_normalizer", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.complex.AConEx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="norm_fc1", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.complex.ConEx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="norm_fc1", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.octonion.ConvO" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="norm_fc1", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.quaternion.ConvQ" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bn_conv2", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="normalizer_class", style="solid"];
"dicee.models.base_model.IdentityClass" -> "dicee.models.base_model.BaseKGE" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="param_init", style="solid"];
}
